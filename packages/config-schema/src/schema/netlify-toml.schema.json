{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Netlify TOML config schema",
  "description": "Config file for Netlify",
  "type": "object",
  "definitions": {
    "BasePath": {
      "title": "Base path",
      "description": "Directory to change to before starting a build. This is where we will look for dependency management files such as `package.json` or `.nvmrc`. If not set, defaults to the root directory.",
      "type": "string",
      "default": "project/"
    },
    "EdgeFunctionPath": {
      "title": "Edge functions directory",
      "description": "Custom path to your edge functions directory. If not set, defaults to `netlify/edge-functions/`.",
      "type": "string",
      "default": "netlify/edge-functions/"
    },
    "PublishPath": {
      "title": "Publish path",
      "description": "Directory that contains the deploy-ready HTML files and assets generated by the build. This is relative to the root directory or relative to the base directory if one has been set.",
      "type": "string",
      "default": "build/"
    },
    "BuildCommand": { "title": "Build command", "description": "Default build command.", "type": "string" },
    "Environment": {
      "title": "Environment Variables",
      "description": "Define build environment variables. Variables set here override those set with the Netlify UI, CLI, or API. Be mindful when using this option and avoid committing sensitive values to public source repositories.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "Processing": {
      "title": "Post processing",
      "description": "Manage post processing settings for your builds. These values will override values set in the Netlify UI.\n\nNote that `skip_processing` must be set to `false` for any other settings to take effect.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "skip_processing": {
          "title": "Skip Processing",
          "description": "Skip all post processing and ignore all other settings.",
          "type": "boolean",
          "default": false
        },
        "css": {
          "title": "CSS",
          "description": "Processing settings for CSS files.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "bundle": {
              "title": "Bundle CSS",
              "description": "Concatenate consecutive CSS files together to reduce HTTP requests.",
              "type": "boolean",
              "default": true
            },
            "minify": {
              "title": "Minify CSS",
              "description": "Run CSS through a minifier to reduce file size.",
              "type": "boolean",
              "default": true
            }
          }
        },
        "js": {
          "title": "JS",
          "description": "Processing settings for JavaScript files.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "bundle": {
              "title": "Bundle JS",
              "description": "Concatenate consecutive JS files together to reduce HTTP requests.",
              "type": "boolean",
              "default": true
            },
            "minify": {
              "title": "Minify JS",
              "description": "Run JS through a minifier to reduce file size.",
              "type": "boolean",
              "default": true
            }
          }
        },
        "html": {
          "title": "HTML",
          "description": "Processing settings for HTML files.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "pretty_urls": {
              "title": "Pretty URLs",
              "description": "Rewrite link URLs to pretty URLs. For example, we will rewrite `/about.html` to `/about` and `/about/index.html` to `/about/`.",
              "type": "boolean"
            }
          }
        },
        "images": {
          "title": "Images",
          "description": "Processing settings for image files.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "compress": {
              "title": "Compress Images",
              "description": "Run all images through lossless image compression.",
              "type": "boolean"
            }
          }
        }
      }
    },
    "BuildOptions": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": { "$ref": "#/definitions/BasePath" },
        "command": { "$ref": "#/definitions/BuildCommand" },
        "edge_functions": { "$ref": "#/definitions/EdgeFunctionPath" },
        "environment": { "$ref": "#/definitions/Environment" },
        "functions": {
          "title": "[DEPRECATED] Directory",
          "description": " [DEPRECATED] Use `[functions] directory=\"\"`",
          "type": "string",
          "default": "netlify/functions",
          "deprecated": true
        },
        "processing": { "$ref": "#/definitions/Processing" },
        "publish": { "$ref": "#/definitions/PublishPath" }
      },
      "title": "Build settings",
      "description": "Settings under [build] are global and are applied to all deploy contexts unless they are overridden by settings for more specific deploy contexts.",
      "x-taplo": {
        "links": {
          "key": "https://docs.netlify.com/configure-builds/file-based-configuration/#build-settings"
        }
      }
    },
    "Plugins": {
      "type": "array",
      "default": [{ "package": "" }],
      "items": {
        "title": "Build Plugins",
        "description": "Netlify Build Plugins extend the functionality of the build process.",
        "type": "object",
        "properties": {
          "package": {
            "type": "string",
            "description": "Package name of the build plugin."
          },
          "inputs": {
            "type": "object",
            "description": "Additional inputs for configuring the build plugin."
          }
        },
        "additionalProperties": false,
        "required": ["package"]
      },
      "x-taplo": {
        "links": {
          "key": "https://docs.netlify.com/configure-builds/file-based-configuration/#build-plugins"
        }
      }
    },
    "ProductionContext": {
      "title": "Production context",
      "description": "All deploys from your site’s production branch will inherit these settings. You can define environment variables here but we recommend using the Netlify UI for sensitive values to keep them out of your source repository.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": { "$ref": "#/definitions/BasePath" },
        "command": { "$ref": "#/definitions/BuildCommand" },
        "edge_functions": { "$ref": "#/definitions/EdgeFunctionPath" },
        "environment": { "$ref": "#/definitions/Environment" },
        "plugins": { "$ref": "#/definitions/Plugins" },
        "processing": { "$ref": "#/definitions/Processing" },
        "publish": { "$ref": "#/definitions/PublishPath" }
      },
      "x-taplo": {
        "links": {
          "key": "https://docs.netlify.com/configure-builds/file-based-configuration/#deploy-contexts"
        }
      }
    },
    "DeployPreviewContext": {
      "title": "Deploy Preview context",
      "description": "All deploys generated from a pull/merge request will inherit these settings.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": { "$ref": "#/definitions/BasePath" },
        "command": { "$ref": "#/definitions/BuildCommand" },
        "edge_functions": { "$ref": "#/definitions/EdgeFunctionPath" },
        "environment": { "$ref": "#/definitions/Environment" },
        "plugins": { "$ref": "#/definitions/Plugins" },
        "processing": { "$ref": "#/definitions/Processing" },
        "publish": { "$ref": "#/definitions/PublishPath" }
      },
      "x-taplo": {
        "links": {
          "key": "https://docs.netlify.com/configure-builds/file-based-configuration/#deploy-contexts"
        }
      }
    },
    "BranchDeployContext": {
      "title": "Branch Deploy context",
      "description": "All deploys generated from a branch that is not your production branch will inherit these settings.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": { "$ref": "#/definitions/BasePath" },
        "command": { "$ref": "#/definitions/BuildCommand" },
        "edge_functions": { "$ref": "#/definitions/EdgeFunctionPath" },
        "environment": { "$ref": "#/definitions/Environment" },
        "plugins": { "$ref": "#/definitions/Plugins" },
        "processing": { "$ref": "#/definitions/Processing" },
        "publish": { "$ref": "#/definitions/PublishPath" }
      },
      "x-taplo": {
        "links": {
          "key": "https://docs.netlify.com/configure-builds/file-based-configuration/#deploy-contexts"
        }
      }
    },
    "SpecificBranchContext": {
      "title": "Specific branch context",
      "description": "All deploys from this specific branch will inherit these settings and they'll take precedence over all other context settings for this branch — including settings for Deploy Preview and branch deploy contexts. To set a specific context for a branch with special characters, enclose the branch name with quotes.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": { "$ref": "#/definitions/BasePath" },
        "command": { "$ref": "#/definitions/BuildCommand" },
        "edge_functions": { "$ref": "#/definitions/EdgeFunctionPath" },
        "environment": { "$ref": "#/definitions/Environment" },
        "plugins": { "$ref": "#/definitions/Plugins" },
        "processing": { "$ref": "#/definitions/Processing" },
        "publish": { "$ref": "#/definitions/PublishPath" }
      },
      "x-taplo": {
        "links": {
          "key": "https://docs.netlify.com/configure-builds/file-based-configuration/#deploy-contexts"
        }
      }
    },
    "FunctionConfigNodeBundler": {
      "title": "Node bundler",
      "description": "Function bundling method used in `@netlify/zip-it-and-ship-it`.",
      "type": "string",
      "enum": ["zisi", "esbuild", "nft", "none"],
      "x-taplo": {
        "docs": {
          "enumValues": [
            "Default function bundling method for JavaScript functions.",
            "Method that leverages `esbuild` to bundle functions, resulting in shorter bundling times and smaller artifacts. TypeScript functions use `esbuild` by default.",
            "Method that leverages `nft` to bundle functions, resulting in shorter bundling times and smaller artifacts. ESM functions use `nft` by default.",
            "Disables bundling completely and expects the function to be already bundled and usable."
          ]
        },
        "links": {
          "key": "https://github.com/netlify/zip-it-and-ship-it"
        }
      }
    },
    "FunctionConfigExternalNodeModules": {
      "title": "External node modules",
      "description": "List of Node.js modules that are copied to the bundled artifact without adjusting their source or references during the bundling process; only applies when `node_bundler` is set to `esbuild`. This property helps handle dependencies that can't be inlined, such as modules with native add-ons.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "FunctionConfigIgnoredNodeModules": {
      "title": "Ignored node modules",
      "description": "List of Node.js modules that are ignored during bundling.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "FunctionConfigIncludedFiles": {
      "title": "Included files",
      "description": "List of additional paths to include in the function bundle. Although our build system includes statically referenced files (like `require(\"./some-file.js\")`) by default, `included_files` lets you specify additional files or directories and reference them dynamically in function code. You can use `*` to match any character or prefix an entry with `!` to exclude files. Paths are relative to the base directory.",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "additionalProperties": false,
  "properties": {
    "build": {
      "$ref": "#/definitions/BuildOptions"
    },
    "plugins": {
      "$ref": "#/definitions/Plugins"
    },
    "context": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/SpecificBranchContext"
      },
      "properties": {
        "production": {
          "$ref": "#/definitions/ProductionContext"
        },
        "deploy-preview": {
          "$ref": "#/definitions/DeployPreviewContext"
        },
        "branch-deploy": {
          "$ref": "#/definitions/BranchDeployContext"
        }
      }
    },
    "redirects": {
      "type": "array",
      "default": [{ "from": "/old-path", "to": "/new-path" }],
      "items": {
        "title": "Redirects",
        "description": "Declare global redirects for all builds. For each redirect you want to declare, add an entry with the [[redirects]] heading. If you need context-specific redirect rules, use a `_headers` or `_redirects` file instead.",
        "type": "object",
        "default": { "from": "/old-path", "to": "/new-path" },
        "properties": {
          "from": {
            "title": "From",
            "description": "Path you want to redirect.",
            "type": "string",
            "default": "/old-path"
          },
          "to": {
            "title": "To",
            "description": "URL or path you want to redirect to.",
            "type": "string",
            "default": "/new-path"
          },
          "status": {
            "title": "HTTP status code",
            "description": "HTTP status code you want to use in that redirect; 301 by default.",
            "type": "integer",
            "default": 301,
            "minimum": 100,
            "exclusiveMaximum": 600
          },
          "force": {
            "title": "Force",
            "description": "Whether to override any existing content in the path or not; false by default.",
            "type": "boolean",
            "default": true,
            "x-taplo": {
              "docs": {
                "main": "Whether to override any existing content in the path or not; false by default. Visit the [shadowing](https://docs.netlify.com/routing/redirects/rewrites-proxies/#shadowing) instructions for more details."
              },
              "links": {
                "key": "https://docs.netlify.com/routing/redirects/rewrites-proxies/#shadowing"
              }
            }
          },
          "query": {
            "title": "Query string parameters",
            "description": "Query string parameters REQUIRED to match the redirect.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-taplo": {
              "docs": {
                "main": "Query string parameters REQUIRED to match the redirect. Visit the [query parameters](https://docs.netlify.com/routing/redirects/redirect-options/#query-parameters) instructions for more details."
              },
              "links": {
                "key": "https://docs.netlify.com/routing/redirects/redirect-options/#query-parameters"
              }
            }
          },
          "conditions": {
            "title": "Conditions",
            "description": "Redirect based on conditions including browser language, geolocation, identity role, or cookie presence.",
            "type": "object",
            "properties": {
              "Cookie": {
                "title": "Cookie presence",
                "description": "Cookie-based redirects allow you to send visitors content based on whether a specific HTTP cookie exists in the request or not, regardless of its value. This condition checks the cookie name in a case-insensitive way.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-taplo": {
                  "links": {
                    "key": "https://docs.netlify.com/routing/redirects/redirect-options/#redirect-by-cookie-presence"
                  }
                }
              },
              "Country": {
                "title": "Country",
                "description": "The Country attribute accepts ISO 3166-1 alpha-2 country codes.",
                "type": "array",
                "items": {
                  "type": "string",
                  "pattern": "^[a-zA-Z]{2}$"
                },
                "x-taplo": {
                  "links": {
                    "key": "https://docs.netlify.com/routing/redirects/redirect-options/#redirect-by-country-or-language"
                  }
                }
              },
              "Language": {
                "title": "Language",
                "description": "The Language attribute accepts standard browser language identification codes and locale codes that combine language and country.",
                "type": "array",
                "items": {
                  "type": "string",
                  "pattern": "^[a-zA-Z]{2}(-[a-zA-Z]{2})?$"
                },
                "x-taplo": {
                  "links": {
                    "key": "https://docs.netlify.com/routing/redirects/redirect-options/#redirect-by-country-or-language"
                  }
                }
              },
              "Role": {
                "title": "Role",
                "description": "Role-based redirects let you restrict access to certain paths of your application to logged-in visitors with certain roles, as authorized by Netlify Identity or any authentication provider that supports JSON Web Tokens (JWT).",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-taplo": {
                  "links": {
                    "key": "https://docs.netlify.com/routing/redirects/redirect-options/#redirect-by-role"
                  }
                }
              }
            }
          },
          "headers": {
            "title": "Request headers",
            "description": "Additional request headers to send in proxy redirects.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-taplo": {
              "docs": {
                "main": "Additional request headers to send in [proxy redirects](https://docs.netlify.com/routing/redirects/rewrites-proxies/#custom-headers-in-proxy-redirects)."
              },
              "links": {
                "key": "https://docs.netlify.com/routing/redirects/rewrites-proxies/#custom-headers-in-proxy-redirects"
              }
            }
          },
          "signed": {
            "title": "Signed",
            "description": "Name of the environment variable that contains the token to use for signed proxy redirects.",
            "type": "string",
            "x-taplo": {
              "docs": {
                "main": "Name of the environment variable that contains the token to use for [signed proxy redirects](https://docs.netlify.com/routing/redirects/rewrites-proxies/#signed-proxy-redirects)."
              },
              "links": {
                "key": "https://docs.netlify.com/routing/redirects/rewrites-proxies/#signed-proxy-redirects"
              }
            }
          }
        },
        "additionalProperties": false,
        "required": ["from"],
        "x-taplo": {
          "links": {
            "key": "https://docs.netlify.com/routing/redirects/#syntax-for-the-netlify-configuration-file"
          }
        }
      }
    },
    "headers": {
      "type": "array",
      "items": {
        "title": "Headers",
        "description": "Define custom headers for specific paths.",
        "type": "object",
        "properties": {
          "for": {
            "title": "For",
            "description": "Define which paths this specific headers block will cover.",
            "type": "string"
          },
          "values": {
            "title": "Values",
            "description": "Define the actual headers.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["for"],
        "additionalProperties": false
      },
      "x-taplo": {
        "docs": {
          "main": "Additional request headers to send in [proxy redirects](https://docs.netlify.com/routing/redirects/rewrites-proxies/#custom-headers-in-proxy-redirects)."
        },
        "links": {
          "key": "https://docs.netlify.com/routing/redirects/rewrites-proxies/#custom-headers-in-proxy-redirects"
        }
      }
    },
    "functions": {
      "title": "Functions",
      "description": "Although there are default settings for Netlify Functions to help you get started, you can use this section for optional, custom configuration.",
      "type": "object",
      "additionalProperties": {
        "description": "Set these options for specific functions by filtering them by function name. You can use glob patterns in your filter. If a function matches several configuration blocks containing one of these properties, the values are concatenated.",
        "type": "object",
        "properties": {
          "node_bundler": { "$ref": "#/definitions/FunctionConfigNodeBundler" },
          "external_node_modules": { "$ref": "#/definitions/FunctionConfigExternalNodeModules" },
          "ignored_node_modules": { "$ref": "#/definitions/FunctionConfigIgnoredNodeModules" },
          "included_files": { "$ref": "#/definitions/FunctionConfigIncludedFiles" },
          "schedule": {
            "title": "Schedule",
            "description": "Define the cron expression for a scheduled function.",
            "type": "string",
            "default": "0 0 * * *",
            "x-taplo": {
              "links": {
                "key": "https://docs.netlify.com/functions/scheduled-functions/"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "properties": {
        "deno_import_map": {
          "title": "Import maps",
          "description": "Relative path to an import map file to map module URLs to names.",
          "type": "string"
        },
        "directory": {
          "title": "Directory",
          "description": "Custom path to your functions. The default location is `YOUR_BASE_DIRECTORY/netlify/functions`.",
          "type": "string",
          "default": "netlify/functions"
        },
        "external_node_modules": { "$ref": "#/definitions/FunctionConfigExternalNodeModules" },
        "ignored_node_modules": { "$ref": "#/definitions/FunctionConfigIgnoredNodeModules" },
        "included_files": { "$ref": "#/definitions/FunctionConfigIncludedFiles" },
        "node_bundler": { "$ref": "#/definitions/FunctionConfigNodeBundler" }
      },
      "x-taplo": {
        "links": {
          "key": "https://docs.netlify.com/configure-builds/file-based-configuration/#functions"
        }
      }
    },
    "edge_functions": {
      "type": "array",
      "default": [{ "path": "/path", "function": "function-name" }],
      "items": {
        "title": "Edge Functions",
        "description": "While you can declare edge functions inline, you can use this section for more advanced edge function configurations.",
        "type": "object",
        "properties": {
          "cache": {
            "type": "string",
            "description": "Should the response of the edge function be cached.",
            "enum": ["off", "manual"],
            "x-taplo": {
              "docs": {
                "enumValues": [
                  "Default, edge function response is not cached.",
                  "Edge function response is cached in the Netlify CDN based on the specified caching headers."
                ]
              }
            }
          },
          "function": {
            "type": "string",
            "description": "Name of the function."
          },
          "path": {
            "type": "string",
            "description": "Path pattern to associate with this edge function.",
            "pattern": "^/.*"
          }
        },
        "additionalProperties": false,
        "required": ["path", "function"]
      },
      "x-taplo": {
        "links": {
          "key": "https://docs.netlify.com/edge-functions/declarations/"
        }
      }
    },
    "dev": {
      "title": "Netlify Dev",
      "description": "Netlify Dev enables a local development environment without any additional setup and this includes using the functions directory setting to scaffold and serve your functions locally. You can use the `[dev]` section to configure this local development environment. \n\nNote that `[dev]` doesn't run in the Bash shell, so you won't be able to use Bash-compatible syntax with the command.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "command": {
          "title": "Dev command",
          "description": "Command that starts your development server or runs a command such as a compiler watch in the background. If no `targetPort` is specified, it runs the command in the background in addition to the static file server.",
          "type": "string"
        },
        "port": {
          "title": "Port",
          "description": "Port that Netlify Dev is accessible from in the browser.",
          "type": "number",
          "default": 8888
        },
        "staticServerPort": {
          "title": "Static server port",
          "description": "Port for the static file server. This value will only take effect if `framework` is set to `#static` or `#auto` and no framework is detected.",
          "type": "number"
        },
        "targetPort": {
          "title": "Target port",
          "description": "Port for your application server, framework, or site generator. If provided, the CLI will wait until the provided `targetPort` is reachable and then proxy requests to it. If you specify values for both `command` and `targetPort`, `framework` must be `#custom`.",
          "type": "number"
        },
        "functionsPort": {
          "title": "Functions port",
          "description": "Port where Netlify Dev serves functions.",
          "type": "number"
        },
        "publish": {
          "title": "Publish path",
          "description": "Path to your static content folder.",
          "type": "string"
        },
        "jwtRolePath": {
          "title": "JWT Role Path",
          "description": "Object path that points to role values for JWT-based redirects.",
          "type": "string"
        },
        "jwtSecret": {
          "title": "JWT Secret",
          "description": "Secret used to verify tokens for JWT-based redirects.",
          "type": "string"
        },
        "envFiles": {
          "title": "Dotenv files",
          "description": "List of dotenv files to consider loading. Defaults to `.env.development.local, .env.local, .env.development, .env` in this order.",
          "type": "array",
          "default": [".env.development.local", ".env.local", ".env.development", ".env"],
          "items": {
            "title": "Filename",
            "description": "The name of the dotenv file.",
            "type": "string"
          }
        },
        "autoLaunch": {
          "title": "Automatically launch browser",
          "description": "Boolean value that determines whether Netlify Dev launches the local server address in your browser.",
          "type": "boolean"
        },
        "framework": {
          "title": "Framework",
          "description": "Setting to use if a project is detected incorrectly, flagged by multiple detectors, or requires a `command` and `targetPort`. Possible values are `#auto`, `#static`, `#custom` or a framework name.",
          "type": "string",
          "default": "#auto"
        },
        "https": {
          "title": "HTTPS",
          "description": "Specify an SSL/TLS certificate and key file for the Netlify Dev local server. By default, Netlify Dev starts an HTTP server, but you can configure a certificate and key file if you require HTTPS.",
          "type": "object",
          "properties": {
            "certFile": {
              "title": "Certificate file",
              "description": "Path to the certificate file.",
              "type": "string"
            },
            "keyFile": {
              "title": "Private key file",
              "description": "Path to the private key file.",
              "type": "string"
            }
          },
          "required": ["certFile", "keyFile"],
          "additionalProperties": false
        }
      },
      "x-taplo": {
        "links": {
          "key": "https://docs.netlify.com/configure-builds/file-based-configuration/#netlify-dev"
        }
      }
    },
    "template": {
      "title": "Template configuration",
      "description": "",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "incoming-hooks": {
          "title": "Incoming hooks",
          "description": "A list of incoming hooks for the user’s site. These hooks allow third party services, such as Contentful and DatoCMS, to control when the site is deployed.",
          "type": "array",
          "default": [""],
          "items": {
            "title": "Integrations",
            "description": "The name of an integration.",
            "type": "string"
          }
        },
        "environment": {
          "title": "Environment Variables",
          "description": "A list of required environment variables. This allows users to configure specific configuration options upon deployment. It also enables customization without having to change the code of the base template.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-taplo": {
        "links": {
          "key": "https://docs.netlify.com/site-deploys/create-deploys/#template-configuration"
        }
      }
    }
  },
  "x-taplo": {
    "links": {
      "key": "https://docs.netlify.com/configure-builds/file-based-configuration/"
    }
  }
}
