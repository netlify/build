export interface NetlifyPluginOptions {
  constants: {
    /**
     * path to the Netlify configuration file. `undefined` if none was used.
     */
    CONFIG_PATH: string | undefined
    /**
     * directory that contains the deploy-ready HTML files and assets generated by the build. Its value is always defined, but the target might not have been created yet.
     */
    PUBLISH_DIR: string
    /**
     * the directory where function source code lives. `undefined` if no `netlify/functions` directory exists in the base directory and if not specified by the user.
     */
    FUNCTIONS_SRC: string | undefined
    /**
     * the directory where built serverless functions are placed before deployment. Its value is always defined, but the target might not have been created yet.
     */
    FUNCTIONS_DIST: string
    /**
     * the directory where Edge Handlers source code lives. `undefined` if no `netlify/edge-handlers` directory exists in the base directory and if not specified in `netlify.toml`.
     */
    EDGE_HANDLERS_SRC: string | undefined
    /**
     * boolean indicating whether the build was [run locally](https://docs.netlify.com/cli/get-started/#run-builds-locally) or on Netlify
     */
    IS_LOCAL: boolean
    /**
     * version of Netlify Build as a `major.minor.patch` string
     */
    NETLIFY_BUILD_VERSION: string
    /**
     * the Netlify site ID
     */
    SITE_ID: string
  }
  /**
   * If your plugin requires additional values from the user, you can specify these requirements in an `inputs` array in the plugin’s [`manifest.yml` file](https://docs.netlify.com/configure-builds/build-plugins/create-plugins/#anatomy-of-a-plugin).
   */
  inputs: Partial<Record<string, string>>
  /**
   * @see https://docs.netlify.com/configure-builds/build-plugins/create-plugins/#netlifyconfig
   */
  netlifyConfig: NetlifyConfig
  /**
   * When an event handler executes, the contents of the `package.json` in a site’s base directory get passed to a plugin.
   * The data fields are normalized to prevent plugin errors. If the site has no `package.json`, the argument is an empty object.
   */
  packageJson: Partial<Record<string, string>>
  utils: NetlifyPluginUtils
}

interface NetlifyConfig {
  /**
   * array of redirects with their modifiable options
   */
  redirects: unknown[]
  /**
   * array of headers with their modifiable options
   */
  headers: unknown[]
  /**
   * array of Edge Handlers with their modifiable options
   */
  edge_handlers: unknown[]
  /**
   * object with options for modifying [functions](https://docs.netlify.com/configure-builds/file-based-configuration/#functions)
   */
  functions: {
    /**
     * string that includes the path to a site’s [functions directory](https://docs.netlify.com/functions/configure-and-deploy/#configure-the-functions-folder)
     */
    directory: string
  }
  build: {
    /**
     * string that includes a site’s [build command](https://docs.netlify.com/configure-builds/get-started/#definitions)
     */
    command: string
    /**
     * string that includes the path to a site’s [Edge Handlers directory](https://docs.netlify.com/edge-handlers/configure-and-build/#choose-an-edge-handlers-directory)
     */
    edge_handlers: string
    /**
     * object that contains a site’s [environment variables](https://docs.netlify.com/configure-builds/environment-variables/#netlify-configuration-variables)
     */
    environment: Partial<Record<string, string>>
    /**
     * object that includes options for [post processing](https://docs.netlify.com/configure-builds/file-based-configuration/#post-processing) HTML, CSS, JavaScript, and images
     */
    processing: object
  }
}

interface NetlifyPluginUtils {
  build: NetlifyPluginBuildUtil
  status: NetlifyPluginStatusUtil
  cache: NetlifyPluginCacheUtil
  run: NetlifyPluginRunUtil
  git: NetlifyPluginGitUtil
}

/**
 * Report errors or cancel builds
 */
type NetlifyPluginBuildUtil = Record<
  'failBuild' | 'failPlugin' | 'cancelBuild',
  (message: string, options?: { error: Error }) => void
>

/**
 * Cache files between builds
 */
type NetlifyPluginCacheUtil = {
  save(
    path: string | readonly string[],
    options?: {
      ttl?: number
      digests?: string[]
      /**
       * @default `process.cwd()`
       */
      cwd: string
    },
  ): Promise<boolean>
  list(options: {
    /**
     * @default `process.cwd()`
     */
    cwd?: string
    /**
     * @default 1
     */
    depth?: number
  }): Promise<string[]>
} & Record<
  'restore' | 'remove' | 'has',
  (
    path: string | readonly string[],
    options?: {
      /**
       * @default `process.cwd()`
       */
      cwd?: string
    },
  ) => Promise<boolean>
>

/**
 * Display information in the deploy summary
 */
interface NetlifyPluginStatusUtil {
  /**
   * Only one status is shown per plugin.
   * Calling `utils.status.show()` twice overrides the previous status.
   */
  show(options: {
    /**
     * Default to the plugin's name followed by a generic title.
     */
    title?: string
    /**
     * Message below the title
     */
    summary: string
    /**
     * Detailed information shown in a collapsible section.
     * @default ""
     */
    text?: string
  }): void
}

interface NetlifyPluginRunUtilOptions {
  env?: Partial<Record<string, string>>
}

interface NetlifyPluginRunUtilResult {
  stdout: string
  stderr: string
  exitCode: number
}

/**
 * Run commands and processes
 * @see https://github.com/netlify/build/blob/master/packages/run-utils/README.md
 */
interface NetlifyPluginRunUtil {
  (
    file: string,
    arguments: readonly string[],
    options?: NetlifyPluginRunUtilOptions,
  ): Promise<NetlifyPluginRunUtilResult>
  command(command: string, options?: NetlifyPluginRunUtilOptions): Promise<NetlifyPluginRunUtilResult>
}

/**
 * Retrieve Git-related information such as the list of modified/created/deleted files
 * @see https://github.com/netlify/build/blob/master/packages/git-utils/README.md
 */
interface NetlifyPluginGitUtil {
  fileMatch(globPattern: string): readonly string[]
  /**
   * Array of all modified files.
   */
  modifiedFiles: readonly string[]
  /**
   * Array of all created files.
   */
  createdFiles: readonly string[]
  /**
   * Array of all deleted files.
   */
  deletedFiles: readonly string[]
  /**
   * Array of commits with details.
   */
  commits: ReadonlyArray<{
    sha: string
    parents: string
    author: {
      name: string
      email: string
      date: string
    }
    committer: {
      name: string
      email: string
      date: string
    }
    message: string
  }>
  /**
   * How many lines of code have changed
   */
  linesOfCode(): Promise<number>
}
