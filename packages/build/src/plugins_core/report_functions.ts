import { promises as fs } from 'fs'
import { join, resolve } from 'path'

import { closeClient, formatTags, InputStatsDOptions, startClient, validateStatsDOptions } from '../report/statsd.js'

const DEFAULT_EDGE_FUNCTIONS_DIST = '.netlify/edge-functions-dist/'

/**
 * Record number of functions build and differentiate between autogenerated and user generated.
 * Sends to statsd daemon.
 */
export const reportFunctions = async function (statsdOpts: InputStatsDOptions, netlifyConfig): Promise<void> {
  if (!validateStatsDOptions(statsdOpts)) {
    return
  }

  const buildDir = netlifyConfig?.build?.publish
  const edgeFunctionsDistPath = resolve(buildDir, DEFAULT_EDGE_FUNCTIONS_DIST)
  const manifestPath = join(edgeFunctionsDistPath, 'manifest.json')
  try {
    await fs.access(manifestPath)

    const data = await fs.readFile(manifestPath)
    // @ts-expect-error TypeScript is not aware that parse can handle Buffer
    const manifestData = JSON.parse(data)

    const totalNumEfs = manifestData.routes.length + manifestData.post_cache_routes.length
    const numGenEfs = Object.values(manifestData.function_config).filter(
      (config: { generator?: string }) => config.generator,
    ).length
    const numUserEfs = totalNumEfs - numGenEfs

    const client = await startClient(statsdOpts)

    client.increment('buildbot.build.functions', numGenEfs, formatTags({ type: 'edge:generated' }))
    client.increment('buildbot.build.functions', numUserEfs, formatTags({ type: 'edge:user' }))

    await closeClient(client)
  } catch {
    return
  }
}
