import { closeClient, formatTags, InputStatsDOptions, startClient, validateStatsDOptions } from '../report/statsd.js'

export type Metric = {
  type: 'increment'
  name: string
  value: number
  tags: Record<string, string | string[]>
}

export type Metrics = Array<Metric>

/**
 * Record number of functions build and differentiate between autogenerated and user generated.
 * Sends to statsd daemon.
 */
export const reportMetrics = async function (statsdOpts: InputStatsDOptions, metrics: Metrics): Promise<void> {
  if (!validateStatsDOptions(statsdOpts)) {
    return
  }

  if (metrics.length === 0) return
  const client = await startClient(statsdOpts)

  metrics.forEach((metric) => {
    if (typeof client[metric.type] === 'function') {
      client[metric.type](metric.name, metric.value, formatTags(metric.tags))
    }
  })

  await closeClient(client)
}
